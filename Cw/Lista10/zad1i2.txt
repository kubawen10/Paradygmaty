1)
    Pierwsza klasa może być kowariantna ponieważ jest tylko źródłem wartości dla otoczenia, nie można zmieniać jej wartości (val).

    a) Druga klasa nie może być kowariantna bo możemy do niej podawać wartości (var) a nie tylko odczytywać (val)
    b) nie można się go pozbyć, klasa musiałaby pozwalać tylko na odczytywanie x (musiałby być val)
    c) nie może być kontrwariantna ponieważ możemy pobierać wartości, musi być [T]

2)
    błąd ponieważ przekazywanie do funkcji jest kontrwariantne 

    to powinno zadziałać
    abstract class Sequence[+A]:
    def append[S>:A](x: Sequence[S]): Sequence[S]
